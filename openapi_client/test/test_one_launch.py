# coding: utf-8

"""
    r/SpaceX API Docs

    ## Disclaimer *We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Space Exploration Technologies Inc (SpaceX), or any of its subsidiaries or its affiliates. The names SpaceX as well as related names, marks, emblems and images are registered trademarks of their respective owners.*  ## Base URL The most current version of the API is v3, with the following base URL `https://api.spacexdata.com/v3`  ## API Status See the [status](https://status.spacexdata.com) page for details  ## Authentication No authentication is required to use this public API  ## JSON Field Masking Smaller JSON payloads can be generated through the use of the `filter` querystring. When using this querystring, all fields not included in the query will be omitted from the response.  For example, on the launches endpoint, you could include `filter=flight_number` to only return the flight number of every launch. Nested JSON fields can be expressed using a forward slash for each nested level. Ex: `filter=rocket/second_stage/payloads` to only return the payload objects from each launch. Multiple filters can be listed using a comma separator Ex: `filter=rocket/second_stage/payloads,flight_number,mission_name`.  More information on the syntax can be found on the json-mask [github](https://github.com/nemtsov/json-mask) page.  ## Pagination All endpoints that return an array of objects can be paginated by using the `limit` and `offset` querystrings. This allows you to limit results and create pages of results to offset or skip.  On all endpoints that return an array, the header `spacex-api-count` is included with the total number of items in the array. This can be used to page through the results. By default, there is no limit set.  For example, the url `https://api.spacexdata.com/v3/launches?limit=1&offset=5` will only return launch #6, because we limited the results to a single launch, and skipped the first 5 launches using offset.  ## Pretty Printing JSON pretty printing is turned off by default to reduce payload size. It can be enabled by including the querystring `pretty=true` in the url. ```http GET https://api.spacexdata.com/v3/launches/latest?pretty=true ```  ## Privacy I do not log IP addresses or any personally identifiable information at the app or web server level. I collect timestamps, HTTP methods, urls, and response times to adjust caching strategies on popular endpoints. Below is a sample log line output: ```bash [27/Aug/2018:00:42:06 +0000] \"GET /v3/launches/latest HTTP/1.1\" 200 - 51.478 ms ```  I use [Cloudflare](https://www.cloudflare.com/) in front of the API. Please see their [privacy policy](https://www.cloudflare.com/privacypolicy/) for more details on data collection policies.  ## Rate Limiting The API has a rate limit of 50 req/sec per IP address, if exceeded, a response of 429 will be given until the rate drops back below 50 req/sec  ## Caching In general, the standard cache times are as follows:  * launches - 30 seconds * ships, payloads, roadster - 5 minutes * capsules, cores, launchpads, landpads - 1 hour * dragons, rockets, missions, history, company info - 24 hours  ## Date field FAQ's Dates and Date related field explanations:  `launch_year` - Year of the launch in string form (Will be deprecated soon)  `launch_date_unix` - UTC launch date/time as a UNIX timestamp in seconds  `launch_date_utc` - UTC launch date/time in ISO 8601 format  `launch_date_local` - Local launch time with time zone offset in ISO 8601 format  `is_tentative` - Set as true until a launch has an time attached to the date  `tentative_max_precision` - Gives the current known precision for the launch date. Valid values are `quarter`, `half`, `year`, `month`, `day`, `hour`. This allows us to give more context when representing partial dates like `November 2019` with a precision of `month`  `tbd` - Set as false when the date includes a day number or a day number with a time, otherwise the date is considered to be TBD and set as true  `upcoming` - Set as true until the moment of launch  `static_fire_date_utc` - UTC date/time for the rocket static fire test in ISO 8601 format  `static_fire_date_unix` - UTC date/time for the rocket static fire test as a UNIX timestamp in seconds  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.one_launch import OneLaunch  # noqa: E501
from openapi_client.rest import ApiException

class TestOneLaunch(unittest.TestCase):
    """OneLaunch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test OneLaunch
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.one_launch.OneLaunch()  # noqa: E501
        if include_optional :
            return OneLaunch(
                flight_number = 56, 
                mission_name = '0', 
                mission_id = [
                    '0'
                    ], 
                launch_year = '0', 
                launch_date_unix = 56, 
                launch_date_utc = '0', 
                launch_date_local = '0', 
                is_tentative = True, 
                tentative_max_precision = '0', 
                tbd = True, 
                launch_window = 56, 
                rocket = {"rocket_id":"falcon9","rocket_name":"Falcon 9","rocket_type":"FT","first_stage":{"cores":[{"core_serial":"B1047","flight":1,"block":5,"gridfins":true,"legs":true,"reused":false,"land_success":true,"landing_intent":true,"landing_type":"ASDS","landing_vehicle":"OCISLY"}]},"second_stage":{"block":5,"payloads":[{"payload_id":"Telstar 19V","norad_id":[43562],"reused":false,"customers":["Telesat"],"nationality":"Canada","manufacturer":"SSL","payload_type":"Satellite","payload_mass_kg":7076,"payload_mass_lbs":15600,"orbit":"GTO","orbit_params":{"reference_system":"geocentric","regime":"geostationary","longitude":-65,"semi_major_axis_km":42163.837,"eccentricity":1.327E-4,"periapsis_km":35780.107,"apoapsis_km":35791.297,"inclination_deg":0.0126,"period_min":1436.051,"lifespan_years":15,"epoch":"2019-02-03T19:17:09Z","mean_motion":1.00274977,"raan":130.2989,"arg_of_pericenter":165.1069,"mean_anomaly":64.5495}}]},"fairings":{"reused":false,"recovery_attempt":false,"recovered":false,"ship":null}}, 
                ships = [
                    '0'
                    ], 
                telemetry = {"flight_club":"https://www.flightclub.io/results/?code=TS19V"}, 
                launch_site = {"site_id":"kwajalein_atoll","site_name":"Kwajalein Atoll","site_name_long":"Kwajalein Atoll Omelek Island"}, 
                launch_success = True, 
                links = {"mission_patch":"https://images2.imgbox.com/c5/53/5jklZkPz_o.png","mission_patch_small":"https://images2.imgbox.com/12/7c/NiniYxoh_o.png","reddit_campaign":"https://www.reddit.com/r/spacex/comments/8w19yg/telstar_19v_launch_campaign_thread/","reddit_launch":"https://www.reddit.com/r/spacex/comments/90p1a6/rspacex_telstar_19v_official_launch_discussion/","reddit_recovery":null,"reddit_media":"https://www.reddit.com/r/spacex/comments/90oxrr/rspacex_telstar_19v_media_thread_videos_images/","presskit":"http://www.spacex.com/sites/spacex/files/telstar19vantagepresskit.pdf","article_link":"https://spaceflightnow.com/2018/07/22/spacex-delivers-for-telesat-with-successful-early-morning-launch/","wikipedia":"https://en.wikipedia.org/wiki/Telstar_19V","video_link":"https://www.youtube.com/watch?v=xybp6zLaGx4","youtube_id":"xybp6zLaGx4","flickr_images":["https://farm1.staticflickr.com/856/28684550147_49802752b3_o.jpg","https://farm1.staticflickr.com/927/28684552447_956a9744f1_o.jpg","https://farm2.staticflickr.com/1828/29700007298_8ac5891d2c_o.jpg","https://farm1.staticflickr.com/914/29700004918_31ed7b73ef_o.jpg","https://farm1.staticflickr.com/844/29700002748_3047e50a0a_o.jpg","https://farm2.staticflickr.com/1786/29700000688_2514cd3cbb_o.jpg"]}, 
                details = '0', 
                upcoming = True, 
                static_fire_date_utc = '0', 
                static_fire_date_unix = 56, 
                timeline = {"webcast_liftoff":899,"go_for_prop_loading":-2280,"rp1_loading":-2100,"stage1_lox_loading":-2100,"stage2_lox_loading":-960,"engine_chill":-420,"prelaunch_checks":-60,"propellant_pressurization":-60,"go_for_launch":-45,"ignition":-3,"liftoff":0,"maxq":72,"meco":150,"stage_sep":153,"second_stage_ignition":154,"fairing_deploy":220,"first_stage_entry_burn":372,"seco-1":492,"first_stage_landing":509,"second_stage_restart":1609,"seco-2":1659,"payload_deploy":1960}
            )
        else :
            return OneLaunch(
                flight_number = 56,
                mission_name = '0',
                mission_id = [
                    '0'
                    ],
                launch_year = '0',
                launch_date_unix = 56,
                launch_date_utc = '0',
                launch_date_local = '0',
                is_tentative = True,
                tentative_max_precision = '0',
                tbd = True,
                launch_window = 56,
                rocket = {"rocket_id":"falcon9","rocket_name":"Falcon 9","rocket_type":"FT","first_stage":{"cores":[{"core_serial":"B1047","flight":1,"block":5,"gridfins":true,"legs":true,"reused":false,"land_success":true,"landing_intent":true,"landing_type":"ASDS","landing_vehicle":"OCISLY"}]},"second_stage":{"block":5,"payloads":[{"payload_id":"Telstar 19V","norad_id":[43562],"reused":false,"customers":["Telesat"],"nationality":"Canada","manufacturer":"SSL","payload_type":"Satellite","payload_mass_kg":7076,"payload_mass_lbs":15600,"orbit":"GTO","orbit_params":{"reference_system":"geocentric","regime":"geostationary","longitude":-65,"semi_major_axis_km":42163.837,"eccentricity":1.327E-4,"periapsis_km":35780.107,"apoapsis_km":35791.297,"inclination_deg":0.0126,"period_min":1436.051,"lifespan_years":15,"epoch":"2019-02-03T19:17:09Z","mean_motion":1.00274977,"raan":130.2989,"arg_of_pericenter":165.1069,"mean_anomaly":64.5495}}]},"fairings":{"reused":false,"recovery_attempt":false,"recovered":false,"ship":null}},
                ships = [
                    '0'
                    ],
                telemetry = {"flight_club":"https://www.flightclub.io/results/?code=TS19V"},
                launch_site = {"site_id":"kwajalein_atoll","site_name":"Kwajalein Atoll","site_name_long":"Kwajalein Atoll Omelek Island"},
                launch_success = True,
                links = {"mission_patch":"https://images2.imgbox.com/c5/53/5jklZkPz_o.png","mission_patch_small":"https://images2.imgbox.com/12/7c/NiniYxoh_o.png","reddit_campaign":"https://www.reddit.com/r/spacex/comments/8w19yg/telstar_19v_launch_campaign_thread/","reddit_launch":"https://www.reddit.com/r/spacex/comments/90p1a6/rspacex_telstar_19v_official_launch_discussion/","reddit_recovery":null,"reddit_media":"https://www.reddit.com/r/spacex/comments/90oxrr/rspacex_telstar_19v_media_thread_videos_images/","presskit":"http://www.spacex.com/sites/spacex/files/telstar19vantagepresskit.pdf","article_link":"https://spaceflightnow.com/2018/07/22/spacex-delivers-for-telesat-with-successful-early-morning-launch/","wikipedia":"https://en.wikipedia.org/wiki/Telstar_19V","video_link":"https://www.youtube.com/watch?v=xybp6zLaGx4","youtube_id":"xybp6zLaGx4","flickr_images":["https://farm1.staticflickr.com/856/28684550147_49802752b3_o.jpg","https://farm1.staticflickr.com/927/28684552447_956a9744f1_o.jpg","https://farm2.staticflickr.com/1828/29700007298_8ac5891d2c_o.jpg","https://farm1.staticflickr.com/914/29700004918_31ed7b73ef_o.jpg","https://farm1.staticflickr.com/844/29700002748_3047e50a0a_o.jpg","https://farm2.staticflickr.com/1786/29700000688_2514cd3cbb_o.jpg"]},
                details = '0',
                upcoming = True,
                static_fire_date_utc = '0',
                static_fire_date_unix = 56,
                timeline = {"webcast_liftoff":899,"go_for_prop_loading":-2280,"rp1_loading":-2100,"stage1_lox_loading":-2100,"stage2_lox_loading":-960,"engine_chill":-420,"prelaunch_checks":-60,"propellant_pressurization":-60,"go_for_launch":-45,"ignition":-3,"liftoff":0,"maxq":72,"meco":150,"stage_sep":153,"second_stage_ignition":154,"fairing_deploy":220,"first_stage_entry_burn":372,"seco-1":492,"first_stage_landing":509,"second_stage_restart":1609,"seco-2":1659,"payload_deploy":1960},
        )

    def testOneLaunch(self):
        """Test OneLaunch"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
