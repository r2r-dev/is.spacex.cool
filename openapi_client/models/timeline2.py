# coding: utf-8

"""
    r/SpaceX API Docs

    ## Disclaimer *We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Space Exploration Technologies Inc (SpaceX), or any of its subsidiaries or its affiliates. The names SpaceX as well as related names, marks, emblems and images are registered trademarks of their respective owners.*  ## Base URL The most current version of the API is v3, with the following base URL `https://api.spacexdata.com/v3`  ## API Status See the [status](https://status.spacexdata.com) page for details  ## Authentication No authentication is required to use this public API  ## JSON Field Masking Smaller JSON payloads can be generated through the use of the `filter` querystring. When using this querystring, all fields not included in the query will be omitted from the response.  For example, on the launches endpoint, you could include `filter=flight_number` to only return the flight number of every launch. Nested JSON fields can be expressed using a forward slash for each nested level. Ex: `filter=rocket/second_stage/payloads` to only return the payload objects from each launch. Multiple filters can be listed using a comma separator Ex: `filter=rocket/second_stage/payloads,flight_number,mission_name`.  More information on the syntax can be found on the json-mask [github](https://github.com/nemtsov/json-mask) page.  ## Pagination All endpoints that return an array of objects can be paginated by using the `limit` and `offset` querystrings. This allows you to limit results and create pages of results to offset or skip.  On all endpoints that return an array, the header `spacex-api-count` is included with the total number of items in the array. This can be used to page through the results. By default, there is no limit set.  For example, the url `https://api.spacexdata.com/v3/launches?limit=1&offset=5` will only return launch #6, because we limited the results to a single launch, and skipped the first 5 launches using offset.  ## Pretty Printing JSON pretty printing is turned off by default to reduce payload size. It can be enabled by including the querystring `pretty=true` in the url. ```http GET https://api.spacexdata.com/v3/launches/latest?pretty=true ```  ## Privacy I do not log IP addresses or any personally identifiable information at the app or web server level. I collect timestamps, HTTP methods, urls, and response times to adjust caching strategies on popular endpoints. Below is a sample log line output: ```bash [27/Aug/2018:00:42:06 +0000] \"GET /v3/launches/latest HTTP/1.1\" 200 - 51.478 ms ```  I use [Cloudflare](https://www.cloudflare.com/) in front of the API. Please see their [privacy policy](https://www.cloudflare.com/privacypolicy/) for more details on data collection policies.  ## Rate Limiting The API has a rate limit of 50 req/sec per IP address, if exceeded, a response of 429 will be given until the rate drops back below 50 req/sec  ## Caching In general, the standard cache times are as follows:  * launches - 30 seconds * ships, payloads, roadster - 5 minutes * capsules, cores, launchpads, landpads - 1 hour * dragons, rockets, missions, history, company info - 24 hours  ## Date field FAQ's Dates and Date related field explanations:  `launch_year` - Year of the launch in string form (Will be deprecated soon)  `launch_date_unix` - UTC launch date/time as a UNIX timestamp in seconds  `launch_date_utc` - UTC launch date/time in ISO 8601 format  `launch_date_local` - Local launch time with time zone offset in ISO 8601 format  `is_tentative` - Set as true until a launch has an time attached to the date  `tentative_max_precision` - Gives the current known precision for the launch date. Valid values are `quarter`, `half`, `year`, `month`, `day`, `hour`. This allows us to give more context when representing partial dates like `November 2019` with a precision of `month`  `tbd` - Set as false when the date includes a day number or a day number with a time, otherwise the date is considered to be TBD and set as true  `upcoming` - Set as true until the moment of launch  `static_fire_date_utc` - UTC date/time for the rocket static fire test in ISO 8601 format  `static_fire_date_unix` - UTC date/time for the rocket static fire test as a UNIX timestamp in seconds  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Timeline2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'webcast_liftoff': 'int',
        'go_for_prop_loading': 'int',
        'rp1_loading': 'int',
        'stage1_lox_loading': 'int',
        'stage2_lox_loading': 'int',
        'engine_chill': 'int',
        'prelaunch_checks': 'int',
        'propellant_pressurization': 'int',
        'go_for_launch': 'int',
        'ignition': 'int',
        'liftoff': 'int',
        'maxq': 'int',
        'meco': 'int',
        'stage_sep': 'int',
        'second_stage_ignition': 'int',
        'fairing_deploy': 'int',
        'first_stage_boostback_burn': 'int',
        'first_stage_entry_burn': 'int',
        'first_stage_landing': 'int',
        'seco_1': 'int',
        'second_stage_restart': 'int',
        'seco_2': 'int',
        'payload_deploy': 'int'
    }

    attribute_map = {
        'webcast_liftoff': 'webcast_liftoff',
        'go_for_prop_loading': 'go_for_prop_loading',
        'rp1_loading': 'rp1_loading',
        'stage1_lox_loading': 'stage1_lox_loading',
        'stage2_lox_loading': 'stage2_lox_loading',
        'engine_chill': 'engine_chill',
        'prelaunch_checks': 'prelaunch_checks',
        'propellant_pressurization': 'propellant_pressurization',
        'go_for_launch': 'go_for_launch',
        'ignition': 'ignition',
        'liftoff': 'liftoff',
        'maxq': 'maxq',
        'meco': 'meco',
        'stage_sep': 'stage_sep',
        'second_stage_ignition': 'second_stage_ignition',
        'fairing_deploy': 'fairing_deploy',
        'first_stage_boostback_burn': 'first_stage_boostback_burn',
        'first_stage_entry_burn': 'first_stage_entry_burn',
        'first_stage_landing': 'first_stage_landing',
        'seco_1': 'seco-1',
        'second_stage_restart': 'second_stage_restart',
        'seco_2': 'seco-2',
        'payload_deploy': 'payload_deploy'
    }

    def __init__(self, webcast_liftoff=None, go_for_prop_loading=None, rp1_loading=None, stage1_lox_loading=None, stage2_lox_loading=None, engine_chill=None, prelaunch_checks=None, propellant_pressurization=None, go_for_launch=None, ignition=None, liftoff=None, maxq=None, meco=None, stage_sep=None, second_stage_ignition=None, fairing_deploy=None, first_stage_boostback_burn=None, first_stage_entry_burn=None, first_stage_landing=None, seco_1=None, second_stage_restart=None, seco_2=None, payload_deploy=None, local_vars_configuration=None):  # noqa: E501
        """Timeline2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._webcast_liftoff = None
        self._go_for_prop_loading = None
        self._rp1_loading = None
        self._stage1_lox_loading = None
        self._stage2_lox_loading = None
        self._engine_chill = None
        self._prelaunch_checks = None
        self._propellant_pressurization = None
        self._go_for_launch = None
        self._ignition = None
        self._liftoff = None
        self._maxq = None
        self._meco = None
        self._stage_sep = None
        self._second_stage_ignition = None
        self._fairing_deploy = None
        self._first_stage_boostback_burn = None
        self._first_stage_entry_burn = None
        self._first_stage_landing = None
        self._seco_1 = None
        self._second_stage_restart = None
        self._seco_2 = None
        self._payload_deploy = None
        self.discriminator = None

        self.webcast_liftoff = webcast_liftoff
        self.go_for_prop_loading = go_for_prop_loading
        self.rp1_loading = rp1_loading
        self.stage1_lox_loading = stage1_lox_loading
        self.stage2_lox_loading = stage2_lox_loading
        self.engine_chill = engine_chill
        self.prelaunch_checks = prelaunch_checks
        self.propellant_pressurization = propellant_pressurization
        self.go_for_launch = go_for_launch
        self.ignition = ignition
        self.liftoff = liftoff
        self.maxq = maxq
        self.meco = meco
        self.stage_sep = stage_sep
        self.second_stage_ignition = second_stage_ignition
        self.fairing_deploy = fairing_deploy
        self.first_stage_boostback_burn = first_stage_boostback_burn
        self.first_stage_entry_burn = first_stage_entry_burn
        self.first_stage_landing = first_stage_landing
        self.seco_1 = seco_1
        self.second_stage_restart = second_stage_restart
        self.seco_2 = seco_2
        self.payload_deploy = payload_deploy

    @property
    def webcast_liftoff(self):
        """Gets the webcast_liftoff of this Timeline2.  # noqa: E501


        :return: The webcast_liftoff of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._webcast_liftoff

    @webcast_liftoff.setter
    def webcast_liftoff(self, webcast_liftoff):
        """Sets the webcast_liftoff of this Timeline2.


        :param webcast_liftoff: The webcast_liftoff of this Timeline2.  # noqa: E501
        :type: int
        """


        self._webcast_liftoff = webcast_liftoff

    @property
    def go_for_prop_loading(self):
        """Gets the go_for_prop_loading of this Timeline2.  # noqa: E501


        :return: The go_for_prop_loading of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._go_for_prop_loading

    @go_for_prop_loading.setter
    def go_for_prop_loading(self, go_for_prop_loading):
        """Sets the go_for_prop_loading of this Timeline2.


        :param go_for_prop_loading: The go_for_prop_loading of this Timeline2.  # noqa: E501
        :type: int
        """


        self._go_for_prop_loading = go_for_prop_loading

    @property
    def rp1_loading(self):
        """Gets the rp1_loading of this Timeline2.  # noqa: E501


        :return: The rp1_loading of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._rp1_loading

    @rp1_loading.setter
    def rp1_loading(self, rp1_loading):
        """Sets the rp1_loading of this Timeline2.


        :param rp1_loading: The rp1_loading of this Timeline2.  # noqa: E501
        :type: int
        """


        self._rp1_loading = rp1_loading

    @property
    def stage1_lox_loading(self):
        """Gets the stage1_lox_loading of this Timeline2.  # noqa: E501


        :return: The stage1_lox_loading of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._stage1_lox_loading

    @stage1_lox_loading.setter
    def stage1_lox_loading(self, stage1_lox_loading):
        """Sets the stage1_lox_loading of this Timeline2.


        :param stage1_lox_loading: The stage1_lox_loading of this Timeline2.  # noqa: E501
        :type: int
        """


        self._stage1_lox_loading = stage1_lox_loading

    @property
    def stage2_lox_loading(self):
        """Gets the stage2_lox_loading of this Timeline2.  # noqa: E501


        :return: The stage2_lox_loading of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._stage2_lox_loading

    @stage2_lox_loading.setter
    def stage2_lox_loading(self, stage2_lox_loading):
        """Sets the stage2_lox_loading of this Timeline2.


        :param stage2_lox_loading: The stage2_lox_loading of this Timeline2.  # noqa: E501
        :type: int
        """


        self._stage2_lox_loading = stage2_lox_loading

    @property
    def engine_chill(self):
        """Gets the engine_chill of this Timeline2.  # noqa: E501


        :return: The engine_chill of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._engine_chill

    @engine_chill.setter
    def engine_chill(self, engine_chill):
        """Sets the engine_chill of this Timeline2.


        :param engine_chill: The engine_chill of this Timeline2.  # noqa: E501
        :type: int
        """


        self._engine_chill = engine_chill

    @property
    def prelaunch_checks(self):
        """Gets the prelaunch_checks of this Timeline2.  # noqa: E501


        :return: The prelaunch_checks of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._prelaunch_checks

    @prelaunch_checks.setter
    def prelaunch_checks(self, prelaunch_checks):
        """Sets the prelaunch_checks of this Timeline2.


        :param prelaunch_checks: The prelaunch_checks of this Timeline2.  # noqa: E501
        :type: int
        """


        self._prelaunch_checks = prelaunch_checks

    @property
    def propellant_pressurization(self):
        """Gets the propellant_pressurization of this Timeline2.  # noqa: E501


        :return: The propellant_pressurization of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._propellant_pressurization

    @propellant_pressurization.setter
    def propellant_pressurization(self, propellant_pressurization):
        """Sets the propellant_pressurization of this Timeline2.


        :param propellant_pressurization: The propellant_pressurization of this Timeline2.  # noqa: E501
        :type: int
        """


        self._propellant_pressurization = propellant_pressurization

    @property
    def go_for_launch(self):
        """Gets the go_for_launch of this Timeline2.  # noqa: E501


        :return: The go_for_launch of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._go_for_launch

    @go_for_launch.setter
    def go_for_launch(self, go_for_launch):
        """Sets the go_for_launch of this Timeline2.


        :param go_for_launch: The go_for_launch of this Timeline2.  # noqa: E501
        :type: int
        """


        self._go_for_launch = go_for_launch

    @property
    def ignition(self):
        """Gets the ignition of this Timeline2.  # noqa: E501


        :return: The ignition of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._ignition

    @ignition.setter
    def ignition(self, ignition):
        """Sets the ignition of this Timeline2.


        :param ignition: The ignition of this Timeline2.  # noqa: E501
        :type: int
        """


        self._ignition = ignition

    @property
    def liftoff(self):
        """Gets the liftoff of this Timeline2.  # noqa: E501


        :return: The liftoff of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._liftoff

    @liftoff.setter
    def liftoff(self, liftoff):
        """Sets the liftoff of this Timeline2.


        :param liftoff: The liftoff of this Timeline2.  # noqa: E501
        :type: int
        """


        self._liftoff = liftoff

    @property
    def maxq(self):
        """Gets the maxq of this Timeline2.  # noqa: E501


        :return: The maxq of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._maxq

    @maxq.setter
    def maxq(self, maxq):
        """Sets the maxq of this Timeline2.


        :param maxq: The maxq of this Timeline2.  # noqa: E501
        :type: int
        """


        self._maxq = maxq

    @property
    def meco(self):
        """Gets the meco of this Timeline2.  # noqa: E501


        :return: The meco of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._meco

    @meco.setter
    def meco(self, meco):
        """Sets the meco of this Timeline2.


        :param meco: The meco of this Timeline2.  # noqa: E501
        :type: int
        """


        self._meco = meco

    @property
    def stage_sep(self):
        """Gets the stage_sep of this Timeline2.  # noqa: E501


        :return: The stage_sep of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._stage_sep

    @stage_sep.setter
    def stage_sep(self, stage_sep):
        """Sets the stage_sep of this Timeline2.


        :param stage_sep: The stage_sep of this Timeline2.  # noqa: E501
        :type: int
        """


        self._stage_sep = stage_sep

    @property
    def second_stage_ignition(self):
        """Gets the second_stage_ignition of this Timeline2.  # noqa: E501


        :return: The second_stage_ignition of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._second_stage_ignition

    @second_stage_ignition.setter
    def second_stage_ignition(self, second_stage_ignition):
        """Sets the second_stage_ignition of this Timeline2.


        :param second_stage_ignition: The second_stage_ignition of this Timeline2.  # noqa: E501
        :type: int
        """


        self._second_stage_ignition = second_stage_ignition

    @property
    def fairing_deploy(self):
        """Gets the fairing_deploy of this Timeline2.  # noqa: E501


        :return: The fairing_deploy of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._fairing_deploy

    @fairing_deploy.setter
    def fairing_deploy(self, fairing_deploy):
        """Sets the fairing_deploy of this Timeline2.


        :param fairing_deploy: The fairing_deploy of this Timeline2.  # noqa: E501
        :type: int
        """


        self._fairing_deploy = fairing_deploy

    @property
    def first_stage_boostback_burn(self):
        """Gets the first_stage_boostback_burn of this Timeline2.  # noqa: E501


        :return: The first_stage_boostback_burn of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._first_stage_boostback_burn

    @first_stage_boostback_burn.setter
    def first_stage_boostback_burn(self, first_stage_boostback_burn):
        """Sets the first_stage_boostback_burn of this Timeline2.


        :param first_stage_boostback_burn: The first_stage_boostback_burn of this Timeline2.  # noqa: E501
        :type: int
        """


        self._first_stage_boostback_burn = first_stage_boostback_burn

    @property
    def first_stage_entry_burn(self):
        """Gets the first_stage_entry_burn of this Timeline2.  # noqa: E501


        :return: The first_stage_entry_burn of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._first_stage_entry_burn

    @first_stage_entry_burn.setter
    def first_stage_entry_burn(self, first_stage_entry_burn):
        """Sets the first_stage_entry_burn of this Timeline2.


        :param first_stage_entry_burn: The first_stage_entry_burn of this Timeline2.  # noqa: E501
        :type: int
        """


        self._first_stage_entry_burn = first_stage_entry_burn

    @property
    def first_stage_landing(self):
        """Gets the first_stage_landing of this Timeline2.  # noqa: E501


        :return: The first_stage_landing of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._first_stage_landing

    @first_stage_landing.setter
    def first_stage_landing(self, first_stage_landing):
        """Sets the first_stage_landing of this Timeline2.


        :param first_stage_landing: The first_stage_landing of this Timeline2.  # noqa: E501
        :type: int
        """


        self._first_stage_landing = first_stage_landing

    @property
    def seco_1(self):
        """Gets the seco_1 of this Timeline2.  # noqa: E501


        :return: The seco_1 of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._seco_1

    @seco_1.setter
    def seco_1(self, seco_1):
        """Sets the seco_1 of this Timeline2.


        :param seco_1: The seco_1 of this Timeline2.  # noqa: E501
        :type: int
        """


        self._seco_1 = seco_1

    @property
    def second_stage_restart(self):
        """Gets the second_stage_restart of this Timeline2.  # noqa: E501


        :return: The second_stage_restart of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._second_stage_restart

    @second_stage_restart.setter
    def second_stage_restart(self, second_stage_restart):
        """Sets the second_stage_restart of this Timeline2.


        :param second_stage_restart: The second_stage_restart of this Timeline2.  # noqa: E501
        :type: int
        """


        self._second_stage_restart = second_stage_restart

    @property
    def seco_2(self):
        """Gets the seco_2 of this Timeline2.  # noqa: E501


        :return: The seco_2 of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._seco_2

    @seco_2.setter
    def seco_2(self, seco_2):
        """Sets the seco_2 of this Timeline2.


        :param seco_2: The seco_2 of this Timeline2.  # noqa: E501
        :type: int
        """


        self._seco_2 = seco_2

    @property
    def payload_deploy(self):
        """Gets the payload_deploy of this Timeline2.  # noqa: E501


        :return: The payload_deploy of this Timeline2.  # noqa: E501
        :rtype: int
        """
        return self._payload_deploy

    @payload_deploy.setter
    def payload_deploy(self, payload_deploy):
        """Sets the payload_deploy of this Timeline2.


        :param payload_deploy: The payload_deploy of this Timeline2.  # noqa: E501
        :type: int
        """


        self._payload_deploy = payload_deploy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Timeline2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Timeline2):
            return True

        return self.to_dict() != other.to_dict()
