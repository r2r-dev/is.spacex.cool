# coding: utf-8

"""
    r/SpaceX API Docs

    ## Disclaimer *We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Space Exploration Technologies Inc (SpaceX), or any of its subsidiaries or its affiliates. The names SpaceX as well as related names, marks, emblems and images are registered trademarks of their respective owners.*  ## Base URL The most current version of the API is v3, with the following base URL `https://api.spacexdata.com/v3`  ## API Status See the [status](https://status.spacexdata.com) page for details  ## Authentication No authentication is required to use this public API  ## JSON Field Masking Smaller JSON payloads can be generated through the use of the `filter` querystring. When using this querystring, all fields not included in the query will be omitted from the response.  For example, on the launches endpoint, you could include `filter=flight_number` to only return the flight number of every launch. Nested JSON fields can be expressed using a forward slash for each nested level. Ex: `filter=rocket/second_stage/payloads` to only return the payload objects from each launch. Multiple filters can be listed using a comma separator Ex: `filter=rocket/second_stage/payloads,flight_number,mission_name`.  More information on the syntax can be found on the json-mask [github](https://github.com/nemtsov/json-mask) page.  ## Pagination All endpoints that return an array of objects can be paginated by using the `limit` and `offset` querystrings. This allows you to limit results and create pages of results to offset or skip.  On all endpoints that return an array, the header `spacex-api-count` is included with the total number of items in the array. This can be used to page through the results. By default, there is no limit set.  For example, the url `https://api.spacexdata.com/v3/launches?limit=1&offset=5` will only return launch #6, because we limited the results to a single launch, and skipped the first 5 launches using offset.  ## Pretty Printing JSON pretty printing is turned off by default to reduce payload size. It can be enabled by including the querystring `pretty=true` in the url. ```http GET https://api.spacexdata.com/v3/launches/latest?pretty=true ```  ## Privacy I do not log IP addresses or any personally identifiable information at the app or web server level. I collect timestamps, HTTP methods, urls, and response times to adjust caching strategies on popular endpoints. Below is a sample log line output: ```bash [27/Aug/2018:00:42:06 +0000] \"GET /v3/launches/latest HTTP/1.1\" 200 - 51.478 ms ```  I use [Cloudflare](https://www.cloudflare.com/) in front of the API. Please see their [privacy policy](https://www.cloudflare.com/privacypolicy/) for more details on data collection policies.  ## Rate Limiting The API has a rate limit of 50 req/sec per IP address, if exceeded, a response of 429 will be given until the rate drops back below 50 req/sec  ## Caching In general, the standard cache times are as follows:  * launches - 30 seconds * ships, payloads, roadster - 5 minutes * capsules, cores, launchpads, landpads - 1 hour * dragons, rockets, missions, history, company info - 24 hours  ## Date field FAQ's Dates and Date related field explanations:  `launch_year` - Year of the launch in string form (Will be deprecated soon)  `launch_date_unix` - UTC launch date/time as a UNIX timestamp in seconds  `launch_date_utc` - UTC launch date/time in ISO 8601 format  `launch_date_local` - Local launch time with time zone offset in ISO 8601 format  `is_tentative` - Set as true until a launch has an time attached to the date  `tentative_max_precision` - Gives the current known precision for the launch date. Valid values are `quarter`, `half`, `year`, `month`, `day`, `hour`. This allows us to give more context when representing partial dates like `November 2019` with a precision of `month`  `tbd` - Set as false when the date includes a day number or a day number with a time, otherwise the date is considered to be TBD and set as true  `upcoming` - Set as true until the moment of launch  `static_fire_date_utc` - UTC date/time for the rocket static fire test in ISO 8601 format  `static_fire_date_unix` - UTC date/time for the rocket static fire test as a UNIX timestamp in seconds  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OneShip(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ship_id': 'str',
        'ship_name': 'str',
        'ship_model': 'str',
        'ship_type': 'str',
        'roles': 'list[str]',
        'active': 'bool',
        'imo': 'int',
        'mmsi': 'int',
        'abs': 'int',
        '_class': 'int',
        'weight_lbs': 'int',
        'weight_kg': 'int',
        'year_built': 'int',
        'home_port': 'str',
        'status': 'str',
        'speed_kn': 'int',
        'course_deg': 'str',
        'position': 'Position',
        'successful_landings': 'str',
        'attempted_landings': 'str',
        'missions': 'list[Mission1]',
        'url': 'str',
        'image': 'str'
    }

    attribute_map = {
        'ship_id': 'ship_id',
        'ship_name': 'ship_name',
        'ship_model': 'ship_model',
        'ship_type': 'ship_type',
        'roles': 'roles',
        'active': 'active',
        'imo': 'imo',
        'mmsi': 'mmsi',
        'abs': 'abs',
        '_class': 'class',
        'weight_lbs': 'weight_lbs',
        'weight_kg': 'weight_kg',
        'year_built': 'year_built',
        'home_port': 'home_port',
        'status': 'status',
        'speed_kn': 'speed_kn',
        'course_deg': 'course_deg',
        'position': 'position',
        'successful_landings': 'successful_landings',
        'attempted_landings': 'attempted_landings',
        'missions': 'missions',
        'url': 'url',
        'image': 'image'
    }

    def __init__(self, ship_id=None, ship_name=None, ship_model=None, ship_type=None, roles=None, active=None, imo=None, mmsi=None, abs=None, _class=None, weight_lbs=None, weight_kg=None, year_built=None, home_port=None, status=None, speed_kn=None, course_deg=None, position=None, successful_landings=None, attempted_landings=None, missions=None, url=None, image=None, local_vars_configuration=None):  # noqa: E501
        """OneShip - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ship_id = None
        self._ship_name = None
        self._ship_model = None
        self._ship_type = None
        self._roles = None
        self._active = None
        self._imo = None
        self._mmsi = None
        self._abs = None
        self.__class = None
        self._weight_lbs = None
        self._weight_kg = None
        self._year_built = None
        self._home_port = None
        self._status = None
        self._speed_kn = None
        self._course_deg = None
        self._position = None
        self._successful_landings = None
        self._attempted_landings = None
        self._missions = None
        self._url = None
        self._image = None
        self.discriminator = None

        self.ship_id = ship_id
        self.ship_name = ship_name
        self.ship_model = ship_model
        self.ship_type = ship_type
        self.roles = roles
        self.active = active
        self.imo = imo
        self.mmsi = mmsi
        self.abs = abs
        self._class = _class
        self.weight_lbs = weight_lbs
        self.weight_kg = weight_kg
        self.year_built = year_built
        self.home_port = home_port
        self.status = status
        self.speed_kn = speed_kn
        self.course_deg = course_deg
        self.position = position
        self.successful_landings = successful_landings
        self.attempted_landings = attempted_landings
        self.missions = missions
        self.url = url
        self.image = image

    @property
    def ship_id(self):
        """Gets the ship_id of this OneShip.  # noqa: E501


        :return: The ship_id of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._ship_id

    @ship_id.setter
    def ship_id(self, ship_id):
        """Sets the ship_id of this OneShip.


        :param ship_id: The ship_id of this OneShip.  # noqa: E501
        :type: str
        """


        self._ship_id = ship_id

    @property
    def ship_name(self):
        """Gets the ship_name of this OneShip.  # noqa: E501


        :return: The ship_name of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._ship_name

    @ship_name.setter
    def ship_name(self, ship_name):
        """Sets the ship_name of this OneShip.


        :param ship_name: The ship_name of this OneShip.  # noqa: E501
        :type: str
        """


        self._ship_name = ship_name

    @property
    def ship_model(self):
        """Gets the ship_model of this OneShip.  # noqa: E501


        :return: The ship_model of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._ship_model

    @ship_model.setter
    def ship_model(self, ship_model):
        """Sets the ship_model of this OneShip.


        :param ship_model: The ship_model of this OneShip.  # noqa: E501
        :type: str
        """

        self._ship_model = ship_model

    @property
    def ship_type(self):
        """Gets the ship_type of this OneShip.  # noqa: E501


        :return: The ship_type of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._ship_type

    @ship_type.setter
    def ship_type(self, ship_type):
        """Sets the ship_type of this OneShip.


        :param ship_type: The ship_type of this OneShip.  # noqa: E501
        :type: str
        """


        self._ship_type = ship_type

    @property
    def roles(self):
        """Gets the roles of this OneShip.  # noqa: E501


        :return: The roles of this OneShip.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this OneShip.


        :param roles: The roles of this OneShip.  # noqa: E501
        :type: list[str]
        """


        self._roles = roles

    @property
    def active(self):
        """Gets the active of this OneShip.  # noqa: E501


        :return: The active of this OneShip.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OneShip.


        :param active: The active of this OneShip.  # noqa: E501
        :type: bool
        """


        self._active = active

    @property
    def imo(self):
        """Gets the imo of this OneShip.  # noqa: E501


        :return: The imo of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._imo

    @imo.setter
    def imo(self, imo):
        """Sets the imo of this OneShip.


        :param imo: The imo of this OneShip.  # noqa: E501
        :type: int
        """


        self._imo = imo

    @property
    def mmsi(self):
        """Gets the mmsi of this OneShip.  # noqa: E501


        :return: The mmsi of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._mmsi

    @mmsi.setter
    def mmsi(self, mmsi):
        """Sets the mmsi of this OneShip.


        :param mmsi: The mmsi of this OneShip.  # noqa: E501
        :type: int
        """


        self._mmsi = mmsi

    @property
    def abs(self):
        """Gets the abs of this OneShip.  # noqa: E501


        :return: The abs of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._abs

    @abs.setter
    def abs(self, abs):
        """Sets the abs of this OneShip.


        :param abs: The abs of this OneShip.  # noqa: E501
        :type: int
        """


        self._abs = abs

    @property
    def _class(self):
        """Gets the _class of this OneShip.  # noqa: E501


        :return: The _class of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this OneShip.


        :param _class: The _class of this OneShip.  # noqa: E501
        :type: int
        """


        self.__class = _class

    @property
    def weight_lbs(self):
        """Gets the weight_lbs of this OneShip.  # noqa: E501


        :return: The weight_lbs of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._weight_lbs

    @weight_lbs.setter
    def weight_lbs(self, weight_lbs):
        """Sets the weight_lbs of this OneShip.


        :param weight_lbs: The weight_lbs of this OneShip.  # noqa: E501
        :type: int
        """


        self._weight_lbs = weight_lbs

    @property
    def weight_kg(self):
        """Gets the weight_kg of this OneShip.  # noqa: E501


        :return: The weight_kg of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._weight_kg

    @weight_kg.setter
    def weight_kg(self, weight_kg):
        """Sets the weight_kg of this OneShip.


        :param weight_kg: The weight_kg of this OneShip.  # noqa: E501
        :type: int
        """


        self._weight_kg = weight_kg

    @property
    def year_built(self):
        """Gets the year_built of this OneShip.  # noqa: E501


        :return: The year_built of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._year_built

    @year_built.setter
    def year_built(self, year_built):
        """Sets the year_built of this OneShip.


        :param year_built: The year_built of this OneShip.  # noqa: E501
        :type: int
        """


        self._year_built = year_built

    @property
    def home_port(self):
        """Gets the home_port of this OneShip.  # noqa: E501


        :return: The home_port of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._home_port

    @home_port.setter
    def home_port(self, home_port):
        """Sets the home_port of this OneShip.


        :param home_port: The home_port of this OneShip.  # noqa: E501
        :type: str
        """


        self._home_port = home_port

    @property
    def status(self):
        """Gets the status of this OneShip.  # noqa: E501


        :return: The status of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OneShip.


        :param status: The status of this OneShip.  # noqa: E501
        :type: str
        """


        self._status = status

    @property
    def speed_kn(self):
        """Gets the speed_kn of this OneShip.  # noqa: E501


        :return: The speed_kn of this OneShip.  # noqa: E501
        :rtype: int
        """
        return self._speed_kn

    @speed_kn.setter
    def speed_kn(self, speed_kn):
        """Sets the speed_kn of this OneShip.


        :param speed_kn: The speed_kn of this OneShip.  # noqa: E501
        :type: int
        """


        self._speed_kn = speed_kn

    @property
    def course_deg(self):
        """Gets the course_deg of this OneShip.  # noqa: E501


        :return: The course_deg of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._course_deg

    @course_deg.setter
    def course_deg(self, course_deg):
        """Sets the course_deg of this OneShip.


        :param course_deg: The course_deg of this OneShip.  # noqa: E501
        :type: str
        """

        self._course_deg = course_deg

    @property
    def position(self):
        """Gets the position of this OneShip.  # noqa: E501


        :return: The position of this OneShip.  # noqa: E501
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OneShip.


        :param position: The position of this OneShip.  # noqa: E501
        :type: Position
        """


        self._position = position

    @property
    def successful_landings(self):
        """Gets the successful_landings of this OneShip.  # noqa: E501


        :return: The successful_landings of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._successful_landings

    @successful_landings.setter
    def successful_landings(self, successful_landings):
        """Sets the successful_landings of this OneShip.


        :param successful_landings: The successful_landings of this OneShip.  # noqa: E501
        :type: str
        """

        self._successful_landings = successful_landings

    @property
    def attempted_landings(self):
        """Gets the attempted_landings of this OneShip.  # noqa: E501


        :return: The attempted_landings of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._attempted_landings

    @attempted_landings.setter
    def attempted_landings(self, attempted_landings):
        """Sets the attempted_landings of this OneShip.


        :param attempted_landings: The attempted_landings of this OneShip.  # noqa: E501
        :type: str
        """

        self._attempted_landings = attempted_landings

    @property
    def missions(self):
        """Gets the missions of this OneShip.  # noqa: E501


        :return: The missions of this OneShip.  # noqa: E501
        :rtype: list[Mission1]
        """
        return self._missions

    @missions.setter
    def missions(self, missions):
        """Sets the missions of this OneShip.


        :param missions: The missions of this OneShip.  # noqa: E501
        :type: list[Mission1]
        """


        self._missions = missions

    @property
    def url(self):
        """Gets the url of this OneShip.  # noqa: E501


        :return: The url of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OneShip.


        :param url: The url of this OneShip.  # noqa: E501
        :type: str
        """


        self._url = url

    @property
    def image(self):
        """Gets the image of this OneShip.  # noqa: E501


        :return: The image of this OneShip.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OneShip.


        :param image: The image of this OneShip.  # noqa: E501
        :type: str
        """


        self._image = image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneShip):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneShip):
            return True

        return self.to_dict() != other.to_dict()
