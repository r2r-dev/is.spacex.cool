# coding: utf-8

"""
    r/SpaceX API Docs

    ## Disclaimer *We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Space Exploration Technologies Inc (SpaceX), or any of its subsidiaries or its affiliates. The names SpaceX as well as related names, marks, emblems and images are registered trademarks of their respective owners.*  ## Base URL The most current version of the API is v3, with the following base URL `https://api.spacexdata.com/v3`  ## API Status See the [status](https://status.spacexdata.com) page for details  ## Authentication No authentication is required to use this public API  ## JSON Field Masking Smaller JSON payloads can be generated through the use of the `filter` querystring. When using this querystring, all fields not included in the query will be omitted from the response.  For example, on the launches endpoint, you could include `filter=flight_number` to only return the flight number of every launch. Nested JSON fields can be expressed using a forward slash for each nested level. Ex: `filter=rocket/second_stage/payloads` to only return the payload objects from each launch. Multiple filters can be listed using a comma separator Ex: `filter=rocket/second_stage/payloads,flight_number,mission_name`.  More information on the syntax can be found on the json-mask [github](https://github.com/nemtsov/json-mask) page.  ## Pagination All endpoints that return an array of objects can be paginated by using the `limit` and `offset` querystrings. This allows you to limit results and create pages of results to offset or skip.  On all endpoints that return an array, the header `spacex-api-count` is included with the total number of items in the array. This can be used to page through the results. By default, there is no limit set.  For example, the url `https://api.spacexdata.com/v3/launches?limit=1&offset=5` will only return launch #6, because we limited the results to a single launch, and skipped the first 5 launches using offset.  ## Pretty Printing JSON pretty printing is turned off by default to reduce payload size. It can be enabled by including the querystring `pretty=true` in the url. ```http GET https://api.spacexdata.com/v3/launches/latest?pretty=true ```  ## Privacy I do not log IP addresses or any personally identifiable information at the app or web server level. I collect timestamps, HTTP methods, urls, and response times to adjust caching strategies on popular endpoints. Below is a sample log line output: ```bash [27/Aug/2018:00:42:06 +0000] \"GET /v3/launches/latest HTTP/1.1\" 200 - 51.478 ms ```  I use [Cloudflare](https://www.cloudflare.com/) in front of the API. Please see their [privacy policy](https://www.cloudflare.com/privacypolicy/) for more details on data collection policies.  ## Rate Limiting The API has a rate limit of 50 req/sec per IP address, if exceeded, a response of 429 will be given until the rate drops back below 50 req/sec  ## Caching In general, the standard cache times are as follows:  * launches - 30 seconds * ships, payloads, roadster - 5 minutes * capsules, cores, launchpads, landpads - 1 hour * dragons, rockets, missions, history, company info - 24 hours  ## Date field FAQ's Dates and Date related field explanations:  `launch_year` - Year of the launch in string form (Will be deprecated soon)  `launch_date_unix` - UTC launch date/time as a UNIX timestamp in seconds  `launch_date_utc` - UTC launch date/time in ISO 8601 format  `launch_date_local` - Local launch time with time zone offset in ISO 8601 format  `is_tentative` - Set as true until a launch has an time attached to the date  `tentative_max_precision` - Gives the current known precision for the launch date. Valid values are `quarter`, `half`, `year`, `month`, `day`, `hour`. This allows us to give more context when representing partial dates like `November 2019` with a precision of `month`  `tbd` - Set as false when the date includes a day number or a day number with a time, otherwise the date is considered to be TBD and set as true  `upcoming` - Set as true until the moment of launch  `static_fire_date_utc` - UTC date/time for the rocket static fire test in ISO 8601 format  `static_fire_date_unix` - UTC date/time for the rocket static fire test as a UNIX timestamp in seconds  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OneRocket1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'active': 'bool',
        'stages': 'int',
        'boosters': 'int',
        'cost_per_launch': 'int',
        'success_rate_pct': 'int',
        'first_flight': 'str',
        'country': 'str',
        'company': 'str',
        'height': 'Height2',
        'diameter': 'Diameter',
        'mass': 'Mass',
        'payload_weights': 'list[PayloadWeight]',
        'first_stage': 'FirstStage6',
        'second_stage': 'SecondStage6',
        'engines': 'Engines1',
        'landing_legs': 'LandingLegs1',
        'wikipedia': 'str',
        'description': 'str',
        'rocket_id': 'str',
        'rocket_name': 'str',
        'rocket_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'stages': 'stages',
        'boosters': 'boosters',
        'cost_per_launch': 'cost_per_launch',
        'success_rate_pct': 'success_rate_pct',
        'first_flight': 'first_flight',
        'country': 'country',
        'company': 'company',
        'height': 'height',
        'diameter': 'diameter',
        'mass': 'mass',
        'payload_weights': 'payload_weights',
        'first_stage': 'first_stage',
        'second_stage': 'second_stage',
        'engines': 'engines',
        'landing_legs': 'landing_legs',
        'wikipedia': 'wikipedia',
        'description': 'description',
        'rocket_id': 'rocket_id',
        'rocket_name': 'rocket_name',
        'rocket_type': 'rocket_type'
    }

    def __init__(self, id=None, active=None, stages=None, boosters=None, cost_per_launch=None, success_rate_pct=None, first_flight=None, country=None, company=None, height=None, diameter=None, mass=None, payload_weights=None, first_stage=None, second_stage=None, engines=None, landing_legs=None, wikipedia=None, description=None, rocket_id=None, rocket_name=None, rocket_type=None, local_vars_configuration=None):  # noqa: E501
        """OneRocket1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._active = None
        self._stages = None
        self._boosters = None
        self._cost_per_launch = None
        self._success_rate_pct = None
        self._first_flight = None
        self._country = None
        self._company = None
        self._height = None
        self._diameter = None
        self._mass = None
        self._payload_weights = None
        self._first_stage = None
        self._second_stage = None
        self._engines = None
        self._landing_legs = None
        self._wikipedia = None
        self._description = None
        self._rocket_id = None
        self._rocket_name = None
        self._rocket_type = None
        self.discriminator = None

        self.id = id
        self.active = active
        self.stages = stages
        self.boosters = boosters
        self.cost_per_launch = cost_per_launch
        self.success_rate_pct = success_rate_pct
        self.first_flight = first_flight
        self.country = country
        self.company = company
        self.height = height
        self.diameter = diameter
        self.mass = mass
        self.payload_weights = payload_weights
        self.first_stage = first_stage
        self.second_stage = second_stage
        self.engines = engines
        self.landing_legs = landing_legs
        self.wikipedia = wikipedia
        self.description = description
        self.rocket_id = rocket_id
        self.rocket_name = rocket_name
        self.rocket_type = rocket_type

    @property
    def id(self):
        """Gets the id of this OneRocket1.  # noqa: E501


        :return: The id of this OneRocket1.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OneRocket1.


        :param id: The id of this OneRocket1.  # noqa: E501
        :type: int
        """


        self._id = id

    @property
    def active(self):
        """Gets the active of this OneRocket1.  # noqa: E501


        :return: The active of this OneRocket1.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OneRocket1.


        :param active: The active of this OneRocket1.  # noqa: E501
        :type: bool
        """


        self._active = active

    @property
    def stages(self):
        """Gets the stages of this OneRocket1.  # noqa: E501


        :return: The stages of this OneRocket1.  # noqa: E501
        :rtype: int
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this OneRocket1.


        :param stages: The stages of this OneRocket1.  # noqa: E501
        :type: int
        """


        self._stages = stages

    @property
    def boosters(self):
        """Gets the boosters of this OneRocket1.  # noqa: E501


        :return: The boosters of this OneRocket1.  # noqa: E501
        :rtype: int
        """
        return self._boosters

    @boosters.setter
    def boosters(self, boosters):
        """Sets the boosters of this OneRocket1.


        :param boosters: The boosters of this OneRocket1.  # noqa: E501
        :type: int
        """


        self._boosters = boosters

    @property
    def cost_per_launch(self):
        """Gets the cost_per_launch of this OneRocket1.  # noqa: E501


        :return: The cost_per_launch of this OneRocket1.  # noqa: E501
        :rtype: int
        """
        return self._cost_per_launch

    @cost_per_launch.setter
    def cost_per_launch(self, cost_per_launch):
        """Sets the cost_per_launch of this OneRocket1.


        :param cost_per_launch: The cost_per_launch of this OneRocket1.  # noqa: E501
        :type: int
        """


        self._cost_per_launch = cost_per_launch

    @property
    def success_rate_pct(self):
        """Gets the success_rate_pct of this OneRocket1.  # noqa: E501


        :return: The success_rate_pct of this OneRocket1.  # noqa: E501
        :rtype: int
        """
        return self._success_rate_pct

    @success_rate_pct.setter
    def success_rate_pct(self, success_rate_pct):
        """Sets the success_rate_pct of this OneRocket1.


        :param success_rate_pct: The success_rate_pct of this OneRocket1.  # noqa: E501
        :type: int
        """


        self._success_rate_pct = success_rate_pct

    @property
    def first_flight(self):
        """Gets the first_flight of this OneRocket1.  # noqa: E501


        :return: The first_flight of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._first_flight

    @first_flight.setter
    def first_flight(self, first_flight):
        """Sets the first_flight of this OneRocket1.


        :param first_flight: The first_flight of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._first_flight = first_flight

    @property
    def country(self):
        """Gets the country of this OneRocket1.  # noqa: E501


        :return: The country of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OneRocket1.


        :param country: The country of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._country = country

    @property
    def company(self):
        """Gets the company of this OneRocket1.  # noqa: E501


        :return: The company of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this OneRocket1.


        :param company: The company of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._company = company

    @property
    def height(self):
        """Gets the height of this OneRocket1.  # noqa: E501


        :return: The height of this OneRocket1.  # noqa: E501
        :rtype: Height2
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this OneRocket1.


        :param height: The height of this OneRocket1.  # noqa: E501
        :type: Height2
        """


        self._height = height

    @property
    def diameter(self):
        """Gets the diameter of this OneRocket1.  # noqa: E501


        :return: The diameter of this OneRocket1.  # noqa: E501
        :rtype: Diameter
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this OneRocket1.


        :param diameter: The diameter of this OneRocket1.  # noqa: E501
        :type: Diameter
        """


        self._diameter = diameter

    @property
    def mass(self):
        """Gets the mass of this OneRocket1.  # noqa: E501


        :return: The mass of this OneRocket1.  # noqa: E501
        :rtype: Mass
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this OneRocket1.


        :param mass: The mass of this OneRocket1.  # noqa: E501
        :type: Mass
        """


        self._mass = mass

    @property
    def payload_weights(self):
        """Gets the payload_weights of this OneRocket1.  # noqa: E501


        :return: The payload_weights of this OneRocket1.  # noqa: E501
        :rtype: list[PayloadWeight]
        """
        return self._payload_weights

    @payload_weights.setter
    def payload_weights(self, payload_weights):
        """Sets the payload_weights of this OneRocket1.


        :param payload_weights: The payload_weights of this OneRocket1.  # noqa: E501
        :type: list[PayloadWeight]
        """


        self._payload_weights = payload_weights

    @property
    def first_stage(self):
        """Gets the first_stage of this OneRocket1.  # noqa: E501


        :return: The first_stage of this OneRocket1.  # noqa: E501
        :rtype: FirstStage6
        """
        return self._first_stage

    @first_stage.setter
    def first_stage(self, first_stage):
        """Sets the first_stage of this OneRocket1.


        :param first_stage: The first_stage of this OneRocket1.  # noqa: E501
        :type: FirstStage6
        """


        self._first_stage = first_stage

    @property
    def second_stage(self):
        """Gets the second_stage of this OneRocket1.  # noqa: E501


        :return: The second_stage of this OneRocket1.  # noqa: E501
        :rtype: SecondStage6
        """
        return self._second_stage

    @second_stage.setter
    def second_stage(self, second_stage):
        """Sets the second_stage of this OneRocket1.


        :param second_stage: The second_stage of this OneRocket1.  # noqa: E501
        :type: SecondStage6
        """


        self._second_stage = second_stage

    @property
    def engines(self):
        """Gets the engines of this OneRocket1.  # noqa: E501


        :return: The engines of this OneRocket1.  # noqa: E501
        :rtype: Engines1
        """
        return self._engines

    @engines.setter
    def engines(self, engines):
        """Sets the engines of this OneRocket1.


        :param engines: The engines of this OneRocket1.  # noqa: E501
        :type: Engines1
        """


        self._engines = engines

    @property
    def landing_legs(self):
        """Gets the landing_legs of this OneRocket1.  # noqa: E501


        :return: The landing_legs of this OneRocket1.  # noqa: E501
        :rtype: LandingLegs1
        """
        return self._landing_legs

    @landing_legs.setter
    def landing_legs(self, landing_legs):
        """Sets the landing_legs of this OneRocket1.


        :param landing_legs: The landing_legs of this OneRocket1.  # noqa: E501
        :type: LandingLegs1
        """


        self._landing_legs = landing_legs

    @property
    def wikipedia(self):
        """Gets the wikipedia of this OneRocket1.  # noqa: E501


        :return: The wikipedia of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._wikipedia

    @wikipedia.setter
    def wikipedia(self, wikipedia):
        """Sets the wikipedia of this OneRocket1.


        :param wikipedia: The wikipedia of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._wikipedia = wikipedia

    @property
    def description(self):
        """Gets the description of this OneRocket1.  # noqa: E501


        :return: The description of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OneRocket1.


        :param description: The description of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._description = description

    @property
    def rocket_id(self):
        """Gets the rocket_id of this OneRocket1.  # noqa: E501


        :return: The rocket_id of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._rocket_id

    @rocket_id.setter
    def rocket_id(self, rocket_id):
        """Sets the rocket_id of this OneRocket1.


        :param rocket_id: The rocket_id of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._rocket_id = rocket_id

    @property
    def rocket_name(self):
        """Gets the rocket_name of this OneRocket1.  # noqa: E501


        :return: The rocket_name of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._rocket_name

    @rocket_name.setter
    def rocket_name(self, rocket_name):
        """Sets the rocket_name of this OneRocket1.


        :param rocket_name: The rocket_name of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._rocket_name = rocket_name

    @property
    def rocket_type(self):
        """Gets the rocket_type of this OneRocket1.  # noqa: E501


        :return: The rocket_type of this OneRocket1.  # noqa: E501
        :rtype: str
        """
        return self._rocket_type

    @rocket_type.setter
    def rocket_type(self, rocket_type):
        """Sets the rocket_type of this OneRocket1.


        :param rocket_type: The rocket_type of this OneRocket1.  # noqa: E501
        :type: str
        """


        self._rocket_type = rocket_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneRocket1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneRocket1):
            return True

        return self.to_dict() != other.to_dict()
