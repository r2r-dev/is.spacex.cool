# coding: utf-8

"""
    r/SpaceX API Docs

    ## Disclaimer *We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Space Exploration Technologies Inc (SpaceX), or any of its subsidiaries or its affiliates. The names SpaceX as well as related names, marks, emblems and images are registered trademarks of their respective owners.*  ## Base URL The most current version of the API is v3, with the following base URL `https://api.spacexdata.com/v3`  ## API Status See the [status](https://status.spacexdata.com) page for details  ## Authentication No authentication is required to use this public API  ## JSON Field Masking Smaller JSON payloads can be generated through the use of the `filter` querystring. When using this querystring, all fields not included in the query will be omitted from the response.  For example, on the launches endpoint, you could include `filter=flight_number` to only return the flight number of every launch. Nested JSON fields can be expressed using a forward slash for each nested level. Ex: `filter=rocket/second_stage/payloads` to only return the payload objects from each launch. Multiple filters can be listed using a comma separator Ex: `filter=rocket/second_stage/payloads,flight_number,mission_name`.  More information on the syntax can be found on the json-mask [github](https://github.com/nemtsov/json-mask) page.  ## Pagination All endpoints that return an array of objects can be paginated by using the `limit` and `offset` querystrings. This allows you to limit results and create pages of results to offset or skip.  On all endpoints that return an array, the header `spacex-api-count` is included with the total number of items in the array. This can be used to page through the results. By default, there is no limit set.  For example, the url `https://api.spacexdata.com/v3/launches?limit=1&offset=5` will only return launch #6, because we limited the results to a single launch, and skipped the first 5 launches using offset.  ## Pretty Printing JSON pretty printing is turned off by default to reduce payload size. It can be enabled by including the querystring `pretty=true` in the url. ```http GET https://api.spacexdata.com/v3/launches/latest?pretty=true ```  ## Privacy I do not log IP addresses or any personally identifiable information at the app or web server level. I collect timestamps, HTTP methods, urls, and response times to adjust caching strategies on popular endpoints. Below is a sample log line output: ```bash [27/Aug/2018:00:42:06 +0000] \"GET /v3/launches/latest HTTP/1.1\" 200 - 51.478 ms ```  I use [Cloudflare](https://www.cloudflare.com/) in front of the API. Please see their [privacy policy](https://www.cloudflare.com/privacypolicy/) for more details on data collection policies.  ## Rate Limiting The API has a rate limit of 50 req/sec per IP address, if exceeded, a response of 429 will be given until the rate drops back below 50 req/sec  ## Caching In general, the standard cache times are as follows:  * launches - 30 seconds * ships, payloads, roadster - 5 minutes * capsules, cores, launchpads, landpads - 1 hour * dragons, rockets, missions, history, company info - 24 hours  ## Date field FAQ's Dates and Date related field explanations:  `launch_year` - Year of the launch in string form (Will be deprecated soon)  `launch_date_unix` - UTC launch date/time as a UNIX timestamp in seconds  `launch_date_utc` - UTC launch date/time in ISO 8601 format  `launch_date_local` - Local launch time with time zone offset in ISO 8601 format  `is_tentative` - Set as true until a launch has an time attached to the date  `tentative_max_precision` - Gives the current known precision for the launch date. Valid values are `quarter`, `half`, `year`, `month`, `day`, `hour`. This allows us to give more context when representing partial dates like `November 2019` with a precision of `month`  `tbd` - Set as false when the date includes a day number or a day number with a time, otherwise the date is considered to be TBD and set as true  `upcoming` - Set as true until the moment of launch  `static_fire_date_utc` - UTC date/time for the rocket static fire test in ISO 8601 format  `static_fire_date_unix` - UTC date/time for the rocket static fire test as a UNIX timestamp in seconds  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Timeline(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'webcast_liftoff': 'int',
        'go_for_prop_loading': 'int',
        'rp1_loading': 'int',
        'stage1_lox_loading': 'int',
        'stage2_lox_loading': 'int',
        'engine_chill': 'int',
        'prelaunch_checks': 'int',
        'propellant_pressurization': 'int',
        'go_for_launch': 'int',
        'ignition': 'int',
        'liftoff': 'int',
        'maxq': 'int',
        'meco': 'int',
        'stage_sep': 'int',
        'second_stage_ignition': 'int',
        'seco_1': 'int',
        'dragon_separation': 'int',
        'dragon_solar_deploy': 'int',
        'dragon_bay_door_deploy': 'int',
        'fairing_deploy': 'int',
        'payload_deploy': 'int',
        'second_stage_restart': 'int',
        'seco_2': 'int',
        'webcast_launch': 'int',
        'payload_deploy_1': 'int',
        'payload_deploy_2': 'int',
        'first_stage_boostback_burn': 'int',
        'first_stage_entry_burn': 'int',
        'first_stage_landing': 'int',
        'beco': 'int',
        'side_core_sep': 'int',
        'side_core_boostback': 'int',
        'center_stage_sep': 'int',
        'center_core_boostback': 'int',
        'side_core_entry_burn': 'int',
        'center_core_entry_burn': 'int',
        'side_core_landing': 'int',
        'center_core_landing': 'int'
    }

    attribute_map = {
        'webcast_liftoff': 'webcast_liftoff',
        'go_for_prop_loading': 'go_for_prop_loading',
        'rp1_loading': 'rp1_loading',
        'stage1_lox_loading': 'stage1_lox_loading',
        'stage2_lox_loading': 'stage2_lox_loading',
        'engine_chill': 'engine_chill',
        'prelaunch_checks': 'prelaunch_checks',
        'propellant_pressurization': 'propellant_pressurization',
        'go_for_launch': 'go_for_launch',
        'ignition': 'ignition',
        'liftoff': 'liftoff',
        'maxq': 'maxq',
        'meco': 'meco',
        'stage_sep': 'stage_sep',
        'second_stage_ignition': 'second_stage_ignition',
        'seco_1': 'seco-1',
        'dragon_separation': 'dragon_separation',
        'dragon_solar_deploy': 'dragon_solar_deploy',
        'dragon_bay_door_deploy': 'dragon_bay_door_deploy',
        'fairing_deploy': 'fairing_deploy',
        'payload_deploy': 'payload_deploy',
        'second_stage_restart': 'second_stage_restart',
        'seco_2': 'seco-2',
        'webcast_launch': 'webcast_launch',
        'payload_deploy_1': 'payload_deploy_1',
        'payload_deploy_2': 'payload_deploy_2',
        'first_stage_boostback_burn': 'first_stage_boostback_burn',
        'first_stage_entry_burn': 'first_stage_entry_burn',
        'first_stage_landing': 'first_stage_landing',
        'beco': 'beco',
        'side_core_sep': 'side_core_sep',
        'side_core_boostback': 'side_core_boostback',
        'center_stage_sep': 'center_stage_sep',
        'center_core_boostback': 'center_core_boostback',
        'side_core_entry_burn': 'side_core_entry_burn',
        'center_core_entry_burn': 'center_core_entry_burn',
        'side_core_landing': 'side_core_landing',
        'center_core_landing': 'center_core_landing'
    }

    def __init__(self, webcast_liftoff=None, go_for_prop_loading=None, rp1_loading=None, stage1_lox_loading=None, stage2_lox_loading=None, engine_chill=None, prelaunch_checks=None, propellant_pressurization=None, go_for_launch=None, ignition=None, liftoff=None, maxq=None, meco=None, stage_sep=None, second_stage_ignition=None, seco_1=None, dragon_separation=None, dragon_solar_deploy=None, dragon_bay_door_deploy=None, fairing_deploy=None, payload_deploy=None, second_stage_restart=None, seco_2=None, webcast_launch=None, payload_deploy_1=None, payload_deploy_2=None, first_stage_boostback_burn=None, first_stage_entry_burn=None, first_stage_landing=None, beco=None, side_core_sep=None, side_core_boostback=None, center_stage_sep=None, center_core_boostback=None, side_core_entry_burn=None, center_core_entry_burn=None, side_core_landing=None, center_core_landing=None, local_vars_configuration=None):  # noqa: E501
        """Timeline - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._webcast_liftoff = None
        self._go_for_prop_loading = None
        self._rp1_loading = None
        self._stage1_lox_loading = None
        self._stage2_lox_loading = None
        self._engine_chill = None
        self._prelaunch_checks = None
        self._propellant_pressurization = None
        self._go_for_launch = None
        self._ignition = None
        self._liftoff = None
        self._maxq = None
        self._meco = None
        self._stage_sep = None
        self._second_stage_ignition = None
        self._seco_1 = None
        self._dragon_separation = None
        self._dragon_solar_deploy = None
        self._dragon_bay_door_deploy = None
        self._fairing_deploy = None
        self._payload_deploy = None
        self._second_stage_restart = None
        self._seco_2 = None
        self._webcast_launch = None
        self._payload_deploy_1 = None
        self._payload_deploy_2 = None
        self._first_stage_boostback_burn = None
        self._first_stage_entry_burn = None
        self._first_stage_landing = None
        self._beco = None
        self._side_core_sep = None
        self._side_core_boostback = None
        self._center_stage_sep = None
        self._center_core_boostback = None
        self._side_core_entry_burn = None
        self._center_core_entry_burn = None
        self._side_core_landing = None
        self._center_core_landing = None
        self.discriminator = None

        if webcast_liftoff is not None:
            self.webcast_liftoff = webcast_liftoff
        if go_for_prop_loading is not None:
            self.go_for_prop_loading = go_for_prop_loading
        if rp1_loading is not None:
            self.rp1_loading = rp1_loading
        if stage1_lox_loading is not None:
            self.stage1_lox_loading = stage1_lox_loading
        if stage2_lox_loading is not None:
            self.stage2_lox_loading = stage2_lox_loading
        if engine_chill is not None:
            self.engine_chill = engine_chill
        if prelaunch_checks is not None:
            self.prelaunch_checks = prelaunch_checks
        if propellant_pressurization is not None:
            self.propellant_pressurization = propellant_pressurization
        if go_for_launch is not None:
            self.go_for_launch = go_for_launch
        if ignition is not None:
            self.ignition = ignition
        if liftoff is not None:
            self.liftoff = liftoff
        if maxq is not None:
            self.maxq = maxq
        if meco is not None:
            self.meco = meco
        if stage_sep is not None:
            self.stage_sep = stage_sep
        if second_stage_ignition is not None:
            self.second_stage_ignition = second_stage_ignition
        if seco_1 is not None:
            self.seco_1 = seco_1
        if dragon_separation is not None:
            self.dragon_separation = dragon_separation
        if dragon_solar_deploy is not None:
            self.dragon_solar_deploy = dragon_solar_deploy
        if dragon_bay_door_deploy is not None:
            self.dragon_bay_door_deploy = dragon_bay_door_deploy
        if fairing_deploy is not None:
            self.fairing_deploy = fairing_deploy
        if payload_deploy is not None:
            self.payload_deploy = payload_deploy
        if second_stage_restart is not None:
            self.second_stage_restart = second_stage_restart
        if seco_2 is not None:
            self.seco_2 = seco_2
        if webcast_launch is not None:
            self.webcast_launch = webcast_launch
        if payload_deploy_1 is not None:
            self.payload_deploy_1 = payload_deploy_1
        if payload_deploy_2 is not None:
            self.payload_deploy_2 = payload_deploy_2
        if first_stage_boostback_burn is not None:
            self.first_stage_boostback_burn = first_stage_boostback_burn
        if first_stage_entry_burn is not None:
            self.first_stage_entry_burn = first_stage_entry_burn
        if first_stage_landing is not None:
            self.first_stage_landing = first_stage_landing
        if beco is not None:
            self.beco = beco
        if side_core_sep is not None:
            self.side_core_sep = side_core_sep
        if side_core_boostback is not None:
            self.side_core_boostback = side_core_boostback
        if center_stage_sep is not None:
            self.center_stage_sep = center_stage_sep
        if center_core_boostback is not None:
            self.center_core_boostback = center_core_boostback
        if side_core_entry_burn is not None:
            self.side_core_entry_burn = side_core_entry_burn
        if center_core_entry_burn is not None:
            self.center_core_entry_burn = center_core_entry_burn
        if side_core_landing is not None:
            self.side_core_landing = side_core_landing
        if center_core_landing is not None:
            self.center_core_landing = center_core_landing

    @property
    def webcast_liftoff(self):
        """Gets the webcast_liftoff of this Timeline.  # noqa: E501


        :return: The webcast_liftoff of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._webcast_liftoff

    @webcast_liftoff.setter
    def webcast_liftoff(self, webcast_liftoff):
        """Sets the webcast_liftoff of this Timeline.


        :param webcast_liftoff: The webcast_liftoff of this Timeline.  # noqa: E501
        :type: int
        """

        self._webcast_liftoff = webcast_liftoff

    @property
    def go_for_prop_loading(self):
        """Gets the go_for_prop_loading of this Timeline.  # noqa: E501


        :return: The go_for_prop_loading of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._go_for_prop_loading

    @go_for_prop_loading.setter
    def go_for_prop_loading(self, go_for_prop_loading):
        """Sets the go_for_prop_loading of this Timeline.


        :param go_for_prop_loading: The go_for_prop_loading of this Timeline.  # noqa: E501
        :type: int
        """

        self._go_for_prop_loading = go_for_prop_loading

    @property
    def rp1_loading(self):
        """Gets the rp1_loading of this Timeline.  # noqa: E501


        :return: The rp1_loading of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._rp1_loading

    @rp1_loading.setter
    def rp1_loading(self, rp1_loading):
        """Sets the rp1_loading of this Timeline.


        :param rp1_loading: The rp1_loading of this Timeline.  # noqa: E501
        :type: int
        """

        self._rp1_loading = rp1_loading

    @property
    def stage1_lox_loading(self):
        """Gets the stage1_lox_loading of this Timeline.  # noqa: E501


        :return: The stage1_lox_loading of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._stage1_lox_loading

    @stage1_lox_loading.setter
    def stage1_lox_loading(self, stage1_lox_loading):
        """Sets the stage1_lox_loading of this Timeline.


        :param stage1_lox_loading: The stage1_lox_loading of this Timeline.  # noqa: E501
        :type: int
        """

        self._stage1_lox_loading = stage1_lox_loading

    @property
    def stage2_lox_loading(self):
        """Gets the stage2_lox_loading of this Timeline.  # noqa: E501


        :return: The stage2_lox_loading of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._stage2_lox_loading

    @stage2_lox_loading.setter
    def stage2_lox_loading(self, stage2_lox_loading):
        """Sets the stage2_lox_loading of this Timeline.


        :param stage2_lox_loading: The stage2_lox_loading of this Timeline.  # noqa: E501
        :type: int
        """

        self._stage2_lox_loading = stage2_lox_loading

    @property
    def engine_chill(self):
        """Gets the engine_chill of this Timeline.  # noqa: E501


        :return: The engine_chill of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._engine_chill

    @engine_chill.setter
    def engine_chill(self, engine_chill):
        """Sets the engine_chill of this Timeline.


        :param engine_chill: The engine_chill of this Timeline.  # noqa: E501
        :type: int
        """

        self._engine_chill = engine_chill

    @property
    def prelaunch_checks(self):
        """Gets the prelaunch_checks of this Timeline.  # noqa: E501


        :return: The prelaunch_checks of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._prelaunch_checks

    @prelaunch_checks.setter
    def prelaunch_checks(self, prelaunch_checks):
        """Sets the prelaunch_checks of this Timeline.


        :param prelaunch_checks: The prelaunch_checks of this Timeline.  # noqa: E501
        :type: int
        """

        self._prelaunch_checks = prelaunch_checks

    @property
    def propellant_pressurization(self):
        """Gets the propellant_pressurization of this Timeline.  # noqa: E501


        :return: The propellant_pressurization of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._propellant_pressurization

    @propellant_pressurization.setter
    def propellant_pressurization(self, propellant_pressurization):
        """Sets the propellant_pressurization of this Timeline.


        :param propellant_pressurization: The propellant_pressurization of this Timeline.  # noqa: E501
        :type: int
        """

        self._propellant_pressurization = propellant_pressurization

    @property
    def go_for_launch(self):
        """Gets the go_for_launch of this Timeline.  # noqa: E501


        :return: The go_for_launch of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._go_for_launch

    @go_for_launch.setter
    def go_for_launch(self, go_for_launch):
        """Sets the go_for_launch of this Timeline.


        :param go_for_launch: The go_for_launch of this Timeline.  # noqa: E501
        :type: int
        """

        self._go_for_launch = go_for_launch

    @property
    def ignition(self):
        """Gets the ignition of this Timeline.  # noqa: E501


        :return: The ignition of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._ignition

    @ignition.setter
    def ignition(self, ignition):
        """Sets the ignition of this Timeline.


        :param ignition: The ignition of this Timeline.  # noqa: E501
        :type: int
        """

        self._ignition = ignition

    @property
    def liftoff(self):
        """Gets the liftoff of this Timeline.  # noqa: E501


        :return: The liftoff of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._liftoff

    @liftoff.setter
    def liftoff(self, liftoff):
        """Sets the liftoff of this Timeline.


        :param liftoff: The liftoff of this Timeline.  # noqa: E501
        :type: int
        """

        self._liftoff = liftoff

    @property
    def maxq(self):
        """Gets the maxq of this Timeline.  # noqa: E501


        :return: The maxq of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._maxq

    @maxq.setter
    def maxq(self, maxq):
        """Sets the maxq of this Timeline.


        :param maxq: The maxq of this Timeline.  # noqa: E501
        :type: int
        """

        self._maxq = maxq

    @property
    def meco(self):
        """Gets the meco of this Timeline.  # noqa: E501


        :return: The meco of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._meco

    @meco.setter
    def meco(self, meco):
        """Sets the meco of this Timeline.


        :param meco: The meco of this Timeline.  # noqa: E501
        :type: int
        """

        self._meco = meco

    @property
    def stage_sep(self):
        """Gets the stage_sep of this Timeline.  # noqa: E501


        :return: The stage_sep of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._stage_sep

    @stage_sep.setter
    def stage_sep(self, stage_sep):
        """Sets the stage_sep of this Timeline.


        :param stage_sep: The stage_sep of this Timeline.  # noqa: E501
        :type: int
        """

        self._stage_sep = stage_sep

    @property
    def second_stage_ignition(self):
        """Gets the second_stage_ignition of this Timeline.  # noqa: E501


        :return: The second_stage_ignition of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._second_stage_ignition

    @second_stage_ignition.setter
    def second_stage_ignition(self, second_stage_ignition):
        """Sets the second_stage_ignition of this Timeline.


        :param second_stage_ignition: The second_stage_ignition of this Timeline.  # noqa: E501
        :type: int
        """

        self._second_stage_ignition = second_stage_ignition

    @property
    def seco_1(self):
        """Gets the seco_1 of this Timeline.  # noqa: E501


        :return: The seco_1 of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._seco_1

    @seco_1.setter
    def seco_1(self, seco_1):
        """Sets the seco_1 of this Timeline.


        :param seco_1: The seco_1 of this Timeline.  # noqa: E501
        :type: int
        """

        self._seco_1 = seco_1

    @property
    def dragon_separation(self):
        """Gets the dragon_separation of this Timeline.  # noqa: E501


        :return: The dragon_separation of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._dragon_separation

    @dragon_separation.setter
    def dragon_separation(self, dragon_separation):
        """Sets the dragon_separation of this Timeline.


        :param dragon_separation: The dragon_separation of this Timeline.  # noqa: E501
        :type: int
        """

        self._dragon_separation = dragon_separation

    @property
    def dragon_solar_deploy(self):
        """Gets the dragon_solar_deploy of this Timeline.  # noqa: E501


        :return: The dragon_solar_deploy of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._dragon_solar_deploy

    @dragon_solar_deploy.setter
    def dragon_solar_deploy(self, dragon_solar_deploy):
        """Sets the dragon_solar_deploy of this Timeline.


        :param dragon_solar_deploy: The dragon_solar_deploy of this Timeline.  # noqa: E501
        :type: int
        """

        self._dragon_solar_deploy = dragon_solar_deploy

    @property
    def dragon_bay_door_deploy(self):
        """Gets the dragon_bay_door_deploy of this Timeline.  # noqa: E501


        :return: The dragon_bay_door_deploy of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._dragon_bay_door_deploy

    @dragon_bay_door_deploy.setter
    def dragon_bay_door_deploy(self, dragon_bay_door_deploy):
        """Sets the dragon_bay_door_deploy of this Timeline.


        :param dragon_bay_door_deploy: The dragon_bay_door_deploy of this Timeline.  # noqa: E501
        :type: int
        """

        self._dragon_bay_door_deploy = dragon_bay_door_deploy

    @property
    def fairing_deploy(self):
        """Gets the fairing_deploy of this Timeline.  # noqa: E501


        :return: The fairing_deploy of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._fairing_deploy

    @fairing_deploy.setter
    def fairing_deploy(self, fairing_deploy):
        """Sets the fairing_deploy of this Timeline.


        :param fairing_deploy: The fairing_deploy of this Timeline.  # noqa: E501
        :type: int
        """

        self._fairing_deploy = fairing_deploy

    @property
    def payload_deploy(self):
        """Gets the payload_deploy of this Timeline.  # noqa: E501


        :return: The payload_deploy of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._payload_deploy

    @payload_deploy.setter
    def payload_deploy(self, payload_deploy):
        """Sets the payload_deploy of this Timeline.


        :param payload_deploy: The payload_deploy of this Timeline.  # noqa: E501
        :type: int
        """

        self._payload_deploy = payload_deploy

    @property
    def second_stage_restart(self):
        """Gets the second_stage_restart of this Timeline.  # noqa: E501


        :return: The second_stage_restart of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._second_stage_restart

    @second_stage_restart.setter
    def second_stage_restart(self, second_stage_restart):
        """Sets the second_stage_restart of this Timeline.


        :param second_stage_restart: The second_stage_restart of this Timeline.  # noqa: E501
        :type: int
        """

        self._second_stage_restart = second_stage_restart

    @property
    def seco_2(self):
        """Gets the seco_2 of this Timeline.  # noqa: E501


        :return: The seco_2 of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._seco_2

    @seco_2.setter
    def seco_2(self, seco_2):
        """Sets the seco_2 of this Timeline.


        :param seco_2: The seco_2 of this Timeline.  # noqa: E501
        :type: int
        """

        self._seco_2 = seco_2

    @property
    def webcast_launch(self):
        """Gets the webcast_launch of this Timeline.  # noqa: E501


        :return: The webcast_launch of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._webcast_launch

    @webcast_launch.setter
    def webcast_launch(self, webcast_launch):
        """Sets the webcast_launch of this Timeline.


        :param webcast_launch: The webcast_launch of this Timeline.  # noqa: E501
        :type: int
        """

        self._webcast_launch = webcast_launch

    @property
    def payload_deploy_1(self):
        """Gets the payload_deploy_1 of this Timeline.  # noqa: E501


        :return: The payload_deploy_1 of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._payload_deploy_1

    @payload_deploy_1.setter
    def payload_deploy_1(self, payload_deploy_1):
        """Sets the payload_deploy_1 of this Timeline.


        :param payload_deploy_1: The payload_deploy_1 of this Timeline.  # noqa: E501
        :type: int
        """

        self._payload_deploy_1 = payload_deploy_1

    @property
    def payload_deploy_2(self):
        """Gets the payload_deploy_2 of this Timeline.  # noqa: E501


        :return: The payload_deploy_2 of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._payload_deploy_2

    @payload_deploy_2.setter
    def payload_deploy_2(self, payload_deploy_2):
        """Sets the payload_deploy_2 of this Timeline.


        :param payload_deploy_2: The payload_deploy_2 of this Timeline.  # noqa: E501
        :type: int
        """

        self._payload_deploy_2 = payload_deploy_2

    @property
    def first_stage_boostback_burn(self):
        """Gets the first_stage_boostback_burn of this Timeline.  # noqa: E501


        :return: The first_stage_boostback_burn of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._first_stage_boostback_burn

    @first_stage_boostback_burn.setter
    def first_stage_boostback_burn(self, first_stage_boostback_burn):
        """Sets the first_stage_boostback_burn of this Timeline.


        :param first_stage_boostback_burn: The first_stage_boostback_burn of this Timeline.  # noqa: E501
        :type: int
        """

        self._first_stage_boostback_burn = first_stage_boostback_burn

    @property
    def first_stage_entry_burn(self):
        """Gets the first_stage_entry_burn of this Timeline.  # noqa: E501


        :return: The first_stage_entry_burn of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._first_stage_entry_burn

    @first_stage_entry_burn.setter
    def first_stage_entry_burn(self, first_stage_entry_burn):
        """Sets the first_stage_entry_burn of this Timeline.


        :param first_stage_entry_burn: The first_stage_entry_burn of this Timeline.  # noqa: E501
        :type: int
        """

        self._first_stage_entry_burn = first_stage_entry_burn

    @property
    def first_stage_landing(self):
        """Gets the first_stage_landing of this Timeline.  # noqa: E501


        :return: The first_stage_landing of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._first_stage_landing

    @first_stage_landing.setter
    def first_stage_landing(self, first_stage_landing):
        """Sets the first_stage_landing of this Timeline.


        :param first_stage_landing: The first_stage_landing of this Timeline.  # noqa: E501
        :type: int
        """

        self._first_stage_landing = first_stage_landing

    @property
    def beco(self):
        """Gets the beco of this Timeline.  # noqa: E501


        :return: The beco of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._beco

    @beco.setter
    def beco(self, beco):
        """Sets the beco of this Timeline.


        :param beco: The beco of this Timeline.  # noqa: E501
        :type: int
        """

        self._beco = beco

    @property
    def side_core_sep(self):
        """Gets the side_core_sep of this Timeline.  # noqa: E501


        :return: The side_core_sep of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._side_core_sep

    @side_core_sep.setter
    def side_core_sep(self, side_core_sep):
        """Sets the side_core_sep of this Timeline.


        :param side_core_sep: The side_core_sep of this Timeline.  # noqa: E501
        :type: int
        """

        self._side_core_sep = side_core_sep

    @property
    def side_core_boostback(self):
        """Gets the side_core_boostback of this Timeline.  # noqa: E501


        :return: The side_core_boostback of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._side_core_boostback

    @side_core_boostback.setter
    def side_core_boostback(self, side_core_boostback):
        """Sets the side_core_boostback of this Timeline.


        :param side_core_boostback: The side_core_boostback of this Timeline.  # noqa: E501
        :type: int
        """

        self._side_core_boostback = side_core_boostback

    @property
    def center_stage_sep(self):
        """Gets the center_stage_sep of this Timeline.  # noqa: E501


        :return: The center_stage_sep of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._center_stage_sep

    @center_stage_sep.setter
    def center_stage_sep(self, center_stage_sep):
        """Sets the center_stage_sep of this Timeline.


        :param center_stage_sep: The center_stage_sep of this Timeline.  # noqa: E501
        :type: int
        """

        self._center_stage_sep = center_stage_sep

    @property
    def center_core_boostback(self):
        """Gets the center_core_boostback of this Timeline.  # noqa: E501


        :return: The center_core_boostback of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._center_core_boostback

    @center_core_boostback.setter
    def center_core_boostback(self, center_core_boostback):
        """Sets the center_core_boostback of this Timeline.


        :param center_core_boostback: The center_core_boostback of this Timeline.  # noqa: E501
        :type: int
        """

        self._center_core_boostback = center_core_boostback

    @property
    def side_core_entry_burn(self):
        """Gets the side_core_entry_burn of this Timeline.  # noqa: E501


        :return: The side_core_entry_burn of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._side_core_entry_burn

    @side_core_entry_burn.setter
    def side_core_entry_burn(self, side_core_entry_burn):
        """Sets the side_core_entry_burn of this Timeline.


        :param side_core_entry_burn: The side_core_entry_burn of this Timeline.  # noqa: E501
        :type: int
        """

        self._side_core_entry_burn = side_core_entry_burn

    @property
    def center_core_entry_burn(self):
        """Gets the center_core_entry_burn of this Timeline.  # noqa: E501


        :return: The center_core_entry_burn of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._center_core_entry_burn

    @center_core_entry_burn.setter
    def center_core_entry_burn(self, center_core_entry_burn):
        """Sets the center_core_entry_burn of this Timeline.


        :param center_core_entry_burn: The center_core_entry_burn of this Timeline.  # noqa: E501
        :type: int
        """

        self._center_core_entry_burn = center_core_entry_burn

    @property
    def side_core_landing(self):
        """Gets the side_core_landing of this Timeline.  # noqa: E501


        :return: The side_core_landing of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._side_core_landing

    @side_core_landing.setter
    def side_core_landing(self, side_core_landing):
        """Sets the side_core_landing of this Timeline.


        :param side_core_landing: The side_core_landing of this Timeline.  # noqa: E501
        :type: int
        """

        self._side_core_landing = side_core_landing

    @property
    def center_core_landing(self):
        """Gets the center_core_landing of this Timeline.  # noqa: E501


        :return: The center_core_landing of this Timeline.  # noqa: E501
        :rtype: int
        """
        return self._center_core_landing

    @center_core_landing.setter
    def center_core_landing(self, center_core_landing):
        """Sets the center_core_landing of this Timeline.


        :param center_core_landing: The center_core_landing of this Timeline.  # noqa: E501
        :type: int
        """

        self._center_core_landing = center_core_landing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Timeline):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Timeline):
            return True

        return self.to_dict() != other.to_dict()
