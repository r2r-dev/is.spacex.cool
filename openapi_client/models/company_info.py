# coding: utf-8

"""
    r/SpaceX API Docs

    ## Disclaimer *We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Space Exploration Technologies Inc (SpaceX), or any of its subsidiaries or its affiliates. The names SpaceX as well as related names, marks, emblems and images are registered trademarks of their respective owners.*  ## Base URL The most current version of the API is v3, with the following base URL `https://api.spacexdata.com/v3`  ## API Status See the [status](https://status.spacexdata.com) page for details  ## Authentication No authentication is required to use this public API  ## JSON Field Masking Smaller JSON payloads can be generated through the use of the `filter` querystring. When using this querystring, all fields not included in the query will be omitted from the response.  For example, on the launches endpoint, you could include `filter=flight_number` to only return the flight number of every launch. Nested JSON fields can be expressed using a forward slash for each nested level. Ex: `filter=rocket/second_stage/payloads` to only return the payload objects from each launch. Multiple filters can be listed using a comma separator Ex: `filter=rocket/second_stage/payloads,flight_number,mission_name`.  More information on the syntax can be found on the json-mask [github](https://github.com/nemtsov/json-mask) page.  ## Pagination All endpoints that return an array of objects can be paginated by using the `limit` and `offset` querystrings. This allows you to limit results and create pages of results to offset or skip.  On all endpoints that return an array, the header `spacex-api-count` is included with the total number of items in the array. This can be used to page through the results. By default, there is no limit set.  For example, the url `https://api.spacexdata.com/v3/launches?limit=1&offset=5` will only return launch #6, because we limited the results to a single launch, and skipped the first 5 launches using offset.  ## Pretty Printing JSON pretty printing is turned off by default to reduce payload size. It can be enabled by including the querystring `pretty=true` in the url. ```http GET https://api.spacexdata.com/v3/launches/latest?pretty=true ```  ## Privacy I do not log IP addresses or any personally identifiable information at the app or web server level. I collect timestamps, HTTP methods, urls, and response times to adjust caching strategies on popular endpoints. Below is a sample log line output: ```bash [27/Aug/2018:00:42:06 +0000] \"GET /v3/launches/latest HTTP/1.1\" 200 - 51.478 ms ```  I use [Cloudflare](https://www.cloudflare.com/) in front of the API. Please see their [privacy policy](https://www.cloudflare.com/privacypolicy/) for more details on data collection policies.  ## Rate Limiting The API has a rate limit of 50 req/sec per IP address, if exceeded, a response of 429 will be given until the rate drops back below 50 req/sec  ## Caching In general, the standard cache times are as follows:  * launches - 30 seconds * ships, payloads, roadster - 5 minutes * capsules, cores, launchpads, landpads - 1 hour * dragons, rockets, missions, history, company info - 24 hours  ## Date field FAQ's Dates and Date related field explanations:  `launch_year` - Year of the launch in string form (Will be deprecated soon)  `launch_date_unix` - UTC launch date/time as a UNIX timestamp in seconds  `launch_date_utc` - UTC launch date/time in ISO 8601 format  `launch_date_local` - Local launch time with time zone offset in ISO 8601 format  `is_tentative` - Set as true until a launch has an time attached to the date  `tentative_max_precision` - Gives the current known precision for the launch date. Valid values are `quarter`, `half`, `year`, `month`, `day`, `hour`. This allows us to give more context when representing partial dates like `November 2019` with a precision of `month`  `tbd` - Set as false when the date includes a day number or a day number with a time, otherwise the date is considered to be TBD and set as true  `upcoming` - Set as true until the moment of launch  `static_fire_date_utc` - UTC date/time for the rocket static fire test in ISO 8601 format  `static_fire_date_unix` - UTC date/time for the rocket static fire test as a UNIX timestamp in seconds  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CompanyInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'founder': 'str',
        'founded': 'int',
        'employees': 'int',
        'vehicles': 'int',
        'launch_sites': 'int',
        'test_sites': 'int',
        'ceo': 'str',
        'cto': 'str',
        'coo': 'str',
        'cto_propulsion': 'str',
        'valuation': 'int',
        'headquarters': 'Headquarters',
        'summary': 'str'
    }

    attribute_map = {
        'name': 'name',
        'founder': 'founder',
        'founded': 'founded',
        'employees': 'employees',
        'vehicles': 'vehicles',
        'launch_sites': 'launch_sites',
        'test_sites': 'test_sites',
        'ceo': 'ceo',
        'cto': 'cto',
        'coo': 'coo',
        'cto_propulsion': 'cto_propulsion',
        'valuation': 'valuation',
        'headquarters': 'headquarters',
        'summary': 'summary'
    }

    def __init__(self, name=None, founder=None, founded=None, employees=None, vehicles=None, launch_sites=None, test_sites=None, ceo=None, cto=None, coo=None, cto_propulsion=None, valuation=None, headquarters=None, summary=None, local_vars_configuration=None):  # noqa: E501
        """CompanyInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._founder = None
        self._founded = None
        self._employees = None
        self._vehicles = None
        self._launch_sites = None
        self._test_sites = None
        self._ceo = None
        self._cto = None
        self._coo = None
        self._cto_propulsion = None
        self._valuation = None
        self._headquarters = None
        self._summary = None
        self.discriminator = None

        self.name = name
        self.founder = founder
        self.founded = founded
        self.employees = employees
        self.vehicles = vehicles
        self.launch_sites = launch_sites
        self.test_sites = test_sites
        self.ceo = ceo
        self.cto = cto
        self.coo = coo
        self.cto_propulsion = cto_propulsion
        self.valuation = valuation
        self.headquarters = headquarters
        self.summary = summary

    @property
    def name(self):
        """Gets the name of this CompanyInfo.  # noqa: E501


        :return: The name of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyInfo.


        :param name: The name of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._name = name

    @property
    def founder(self):
        """Gets the founder of this CompanyInfo.  # noqa: E501


        :return: The founder of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._founder

    @founder.setter
    def founder(self, founder):
        """Sets the founder of this CompanyInfo.


        :param founder: The founder of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._founder = founder

    @property
    def founded(self):
        """Gets the founded of this CompanyInfo.  # noqa: E501


        :return: The founded of this CompanyInfo.  # noqa: E501
        :rtype: int
        """
        return self._founded

    @founded.setter
    def founded(self, founded):
        """Sets the founded of this CompanyInfo.


        :param founded: The founded of this CompanyInfo.  # noqa: E501
        :type: int
        """


        self._founded = founded

    @property
    def employees(self):
        """Gets the employees of this CompanyInfo.  # noqa: E501


        :return: The employees of this CompanyInfo.  # noqa: E501
        :rtype: int
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this CompanyInfo.


        :param employees: The employees of this CompanyInfo.  # noqa: E501
        :type: int
        """


        self._employees = employees

    @property
    def vehicles(self):
        """Gets the vehicles of this CompanyInfo.  # noqa: E501


        :return: The vehicles of this CompanyInfo.  # noqa: E501
        :rtype: int
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this CompanyInfo.


        :param vehicles: The vehicles of this CompanyInfo.  # noqa: E501
        :type: int
        """


        self._vehicles = vehicles

    @property
    def launch_sites(self):
        """Gets the launch_sites of this CompanyInfo.  # noqa: E501


        :return: The launch_sites of this CompanyInfo.  # noqa: E501
        :rtype: int
        """
        return self._launch_sites

    @launch_sites.setter
    def launch_sites(self, launch_sites):
        """Sets the launch_sites of this CompanyInfo.


        :param launch_sites: The launch_sites of this CompanyInfo.  # noqa: E501
        :type: int
        """


        self._launch_sites = launch_sites

    @property
    def test_sites(self):
        """Gets the test_sites of this CompanyInfo.  # noqa: E501


        :return: The test_sites of this CompanyInfo.  # noqa: E501
        :rtype: int
        """
        return self._test_sites

    @test_sites.setter
    def test_sites(self, test_sites):
        """Sets the test_sites of this CompanyInfo.


        :param test_sites: The test_sites of this CompanyInfo.  # noqa: E501
        :type: int
        """


        self._test_sites = test_sites

    @property
    def ceo(self):
        """Gets the ceo of this CompanyInfo.  # noqa: E501


        :return: The ceo of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this CompanyInfo.


        :param ceo: The ceo of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._ceo = ceo

    @property
    def cto(self):
        """Gets the cto of this CompanyInfo.  # noqa: E501


        :return: The cto of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._cto

    @cto.setter
    def cto(self, cto):
        """Sets the cto of this CompanyInfo.


        :param cto: The cto of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._cto = cto

    @property
    def coo(self):
        """Gets the coo of this CompanyInfo.  # noqa: E501


        :return: The coo of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._coo

    @coo.setter
    def coo(self, coo):
        """Sets the coo of this CompanyInfo.


        :param coo: The coo of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._coo = coo

    @property
    def cto_propulsion(self):
        """Gets the cto_propulsion of this CompanyInfo.  # noqa: E501


        :return: The cto_propulsion of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._cto_propulsion

    @cto_propulsion.setter
    def cto_propulsion(self, cto_propulsion):
        """Sets the cto_propulsion of this CompanyInfo.


        :param cto_propulsion: The cto_propulsion of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._cto_propulsion = cto_propulsion

    @property
    def valuation(self):
        """Gets the valuation of this CompanyInfo.  # noqa: E501


        :return: The valuation of this CompanyInfo.  # noqa: E501
        :rtype: int
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this CompanyInfo.


        :param valuation: The valuation of this CompanyInfo.  # noqa: E501
        :type: int
        """


        self._valuation = valuation

    @property
    def headquarters(self):
        """Gets the headquarters of this CompanyInfo.  # noqa: E501


        :return: The headquarters of this CompanyInfo.  # noqa: E501
        :rtype: Headquarters
        """
        return self._headquarters

    @headquarters.setter
    def headquarters(self, headquarters):
        """Sets the headquarters of this CompanyInfo.


        :param headquarters: The headquarters of this CompanyInfo.  # noqa: E501
        :type: Headquarters
        """


        self._headquarters = headquarters

    @property
    def summary(self):
        """Gets the summary of this CompanyInfo.  # noqa: E501


        :return: The summary of this CompanyInfo.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CompanyInfo.


        :param summary: The summary of this CompanyInfo.  # noqa: E501
        :type: str
        """


        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyInfo):
            return True

        return self.to_dict() != other.to_dict()
